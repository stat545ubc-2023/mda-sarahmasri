library(datateachr) # <- might contain the data you picked!
library(tidyverse)
summary_table_1 <- cancer_sample %>% group_by(diagnosis) %>%
summarise(across(c(symmetry_mean, fractal_dimension_mean), list(min=min, max=max, mean=mean, sd=sd, IQR=IQR))) %>%
pivot_longer(-diagnosis,
names_to = c("variable",".value"),
names_pattern = "(.+)_(.+)")
(summary_table_1)
cancer_sample %>% ggplot(aes(x = symmetry_mean, y = fractal_dimension_mean)) +
geom_point()  + scale_y_log10("Log10 Fractal Dimension Mean") +
xlab("Symmetry") +
ggtitle("Log Fractal Dimension vs. Symmetry")
summary_table_2 <- cancer_sample %>% group_by(diagnosis) %>%
summarise(across(c(radius_mean, texture_mean, smoothness_mean, compactness_mean, concavity_mean, symmetry_mean, fractal_dimension_mean),
list(min=min, max=max, mean=mean, sd=sd, IQR=IQR))) %>%
pivot_longer(-diagnosis,
names_to = c("variable",".value"),
names_pattern = "(.+)_(.+)")
(summary_table_2)
cancer_sample %>% ggplot(aes(diagnosis, log(radius_mean), fill=factor(diagnosis))) + geom_boxplot() + xlab("Diagnosis") + ylab("log Radius") + ggtitle("Log-Scaled Radius Boxplot")
cancer_sample %>% ggplot(aes(diagnosis, log(texture_mean), fill=factor(diagnosis))) + geom_boxplot() + xlab("Diagnosis") + ylab("log Texture") + ggtitle("Log-Scaled Radius Boxplot")
cancer_sample %>% ggplot(aes(diagnosis, log(smoothness_mean), fill=factor(diagnosis))) + geom_boxplot() + xlab("Diagnosis") + ylab("log Smoothness") + ggtitle("Log-Scaled Radius Boxplot")
cancer_sample %>% ggplot(aes(diagnosis, log(compactness_mean), fill=factor(diagnosis))) +
geom_boxplot() + xlab("Diagnosis") + ylab("log Compactness") + ggtitle("Log-Scaled Radius Boxplot")
cancer_sample %>% ggplot(aes(diagnosis, log(concavity_mean), fill=factor(diagnosis))) + geom_boxplot() + xlab("Diagnosis") + ylab("log Concavity") + ggtitle("Log-Scaled Radius Boxplot")
cancer_sample %>% ggplot(aes(diagnosis, log(symmetry_mean), fill=factor(diagnosis))) + geom_boxplot() + xlab("Diagnosis") + ylab("log Symmetry") + ggtitle("Log-Scaled Radius Boxplot")
cancer_sample %>% ggplot(aes(diagnosis, log(fractal_dimension_mean), fill=factor(diagnosis))) + geom_boxplot() + xlab("Diagnosis") + ylab("log Fractal Dimension") + ggtitle("log Radius Boxplot")
summary_table_3 <- cancer_sample %>% group_by(diagnosis) %>%
summarise(across(ends_with("_worst"),
list(min=min, max=max, mean=mean, sd=sd, IQR=IQR))) %>%
pivot_longer(-diagnosis,
names_to = c("variable",".value"),
names_pattern = "(.+)_(.+)")
(summary_table_3)
cancer_sample %>% ggplot(aes(x = radius_worst, y = texture_worst)) +
geom_point()  + scale_y_log10("Log10 Texture Worst") +
xlab("Radius Worst") +
ggtitle("Log Scaled Texture Worst vs. Radius Worst")
cancer_sample %>% ggplot(aes(x = perimeter_worst, y = area_worst)) +
geom_point()  + scale_y_log10("Log10 Area Worst") +
xlab("Perimeter Worst") +
ggtitle("Log Scaled Area Worst vs. Perimeter Worst")
cancer_sample %>% ggplot(aes(x = smoothness_worst, y = compactness_worst)) +
geom_point()  + scale_y_log10("Log10 Compactness Worst") +
xlab("Smoothness Worst") +
ggtitle("Log Scaled Compactness Worst vs. Smoothness Worst")
cancer_sample %>% ggplot(aes(x = concavity_worst, y = concave_points_worst)) +
geom_point()  + scale_y_log10("Log10 Concave Points Worst") +
xlab("Concavity Worst") +
ggtitle("Log Scaled Concave Points Worst vs. Concavity Worst")
summary_table_4 <- cancer_sample %>% group_by(diagnosis) %>% summarise(n = n())
(summary_table_4)
cancer_sample %>% ggplot(aes(x = diagnosis, fill = diagnosis)) + geom_bar() + geom_text(stat='count', aes(label=after_stat(count)), vjust=-0.4)
cancer_sample_untidy <- cancer_sample %>% pivot_longer(cols = c(-ID, -diagnosis), names_to = c(".value", "statistic"), names_pattern = '(.*)_(.*)')
cancer_sample_untidy
cancer_sample_tidy <- cancer_sample_untidy %>% pivot_wider(names_from = statistic, values_from = c(-ID, -diagnosis, -statistic))
cancer_sample_tidy
all(cancer_sample_tidy[,order(names(cancer_sample_tidy))] == cancer_sample[,order(names(cancer_sample))])
## Interested in symmetry and fractal dimension, so filter out all unrelated variables.
cancer_sample_1 <- cancer_sample %>% select(starts_with(c('symmetry', 'fractal_dimension'))) %>% arrange()
cancer_sample_1
## Interested in diagnosis, radius, texture, smoothness, compactness, concavity, symmetry, and fractal dimension. Filter out non-distinct rows in case data is updated.
## Mutate the diagnosis variable so that the levels are represetned with numerical values. This will help when we apply glm() later.
cancer_sample_2 <- cancer_sample %>%
arrange() %>%
select(diagnosis, starts_with(c('radius', 'texture', 'smoothness', 'compactness', 'concavity', 'symmetry', 'fractal_dimension'))) %>%
distinct() %>%
mutate(diagnosis = case_when(diagnosis == 'M' ~ 1,
diagnosis == 'B' ~ 0))
cancer_sample_2
## Four functions used: select(), arrange(), starts_with(), distinct(), mutate(), case_when()
## For reproducibility
set.seed(123)
train_ind <- sample(seq_len(nrow(cancer_sample_2)), size = floor(0.7 * nrow(cancer_sample_2)))
cancer_sample_train <- cancer_sample_2 %>% slice(train_ind)
cancer_sample_test <- cancer_sample_2 %>% slice(-train_ind)
cancer_model <- glm(diagnosis ~ ., data = cancer_sample_train, family = "binomial")
(cancer_model)
predictions_list <- predict(cancer_model, newdata = cancer_sample_test, type = "response")
cancer_predictions <- cancer_sample_test %>% select(diagnosis) %>%
mutate(predictions = predictions_list,
index = 1:nrow(.),
correct = case_when(predictions >= 0.5 & diagnosis == 1 ~ TRUE,
predictions >= 0.5 & diagnosis == 0 ~ FALSE,
predictions < 0.5 & diagnosis == 0 ~ TRUE,
predictions < 0.5 & diagnosis == 1 ~ FALSE
)) %>%
select(index, everything())
cancer_predictions %>% ggplot(aes(x=index, y=predictions, color = correct)) + geom_point() + ggtitle("Cancer Predictions Plot") + xlab("Index") + ylab("Prediction")
if (file.exists(here::here("output/summary_table_2.csv"))) {file.remove(here::here("output/summary_table_2.csv"))}
write_csv(summary_table_2, here::here("output/summary_table_2.csv"))
if (file.exists(here::here("output/cancer_model.RDS"))) {file.remove(here::here("output/cancer_model.RDS"))}
saveRDS(cancer_model, here::here("output/cancer_model.RDS"))
readRDS(here::here("output/cancer_model.RDS"))
